@using BlazorApp.App.Pages.GoalControl.Modals
@using BlazorApp.App.Services
@using CurrieTechnologies.Razor.SweetAlert2;
@using PruebaTecnica.Shared.Dtos
@using PruebaTecnica.Shared.RequestModels
@using PruebaTecnica.Shared.RequestModels.Goal;
@inject IGoalServices GoalService;
@inject SweetAlertService Swal;

<div style="background-color: white;">
    <button class="btn btn-primary background-color-primary m-1" @onclick="OnNewGoal">
        <i class="bi bi-plus"></i>
        Nueva meta
    </button>

    @foreach (var goal in listGoals)
    {
        <div class="card" style="width: 100%; cursor:pointer" @onclick="() => OnSelectGoal(goal)">
            <div class="card-body">
             
                <div class="card-title" style="display: flex;justify-content: space-between;"> 
                    <strong>@goal.Name</strong>
                    <div>
                        <span style="cursor:pointer" @onclick="() => OnEditGoal(goal)"><i class="bi bi-pencil-fill"></i></span>
                        <span style="cursor:pointer" @onclick="() => OnDeleteGoal(goal)"><i class="bi bi-trash"></i></span>
                    </div>
                </div>
                <h6 class="card-subtitle mb-2 text-muted">Fecha creada: @goal.DateCreated</h6>
                <p class="card-text">Tareas completadas:  @CalculateCompletedTasksCount(goal.Activities) / @goal.Activities.Count() @(goal.Activities.Count() > 0 ? CalculateCompletedTasksCount(goal.Activities) * 100 / goal.Activities.Count() : 0)%</p>
                <p class="card-text">
                    <div class="progress">
                        <div class="progress-bar" style="width: @(goal.Activities.Count() > 0 ? CalculateCompletedTasksCount(goal.Activities) * 100 / goal.Activities.Count() : 0)%" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                    
                </p>
            </div>
        </div>
    }
</div>

 <Pagination CurrentPage="@currentPage" TotalPages="@totalPages" OnPageSelected="@OnPageChanged" />


<Modal @ref="modal" Title="@modalTitle" OnButtonClickAccept="@OnModalAccept" Close="@Close">
    <AddModal inputValue="@inputValue" inputValueChanged="@InputValueChanged" showError="@showError"></AddModal>
</Modal>

@code {
    [Parameter] public Action<GoalDto> OnSelectGoal { get; set; }

    Modal modal;
    List<GoalDto> listGoals = new List<GoalDto>();
    GoalDto goalEditing;
    string modalTitle;
    string inputValue;
    bool isEditMode;
    bool showError = false;

    private int currentPage = 1;
    private int totalPages = 0;
    private int pageSize = 5;


    protected override async Task OnInitializedAsync()
    {
        await LoadList();
    }

    public async Task LoadList()
    {
        var response = await GoalService.GetAll(new PaginationRequestModel() { Page = currentPage, PageSize = pageSize });
        totalPages = response.TotalPages;
        listGoals = response.Data;
        StateHasChanged();
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadList();
    }

    void OnNewGoal() => OpenModal("Agregar nueva meta");

    void OnEditGoal(GoalDto goal)
    {
        goalEditing = goal;
        inputValue = goal.Name;
        isEditMode = true;
        OpenModal("Editar meta");
        StateHasChanged();
    }

    async void OnDeleteGoal(GoalDto goal)
    {
        await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Estas seguro que quieres eliminar?",
            Text = "No podrás recuperar las actividades",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Si",
            CancelButtonText = "No",
            ConfirmButtonColor = "rgb(51, 102, 102)"
        }).ContinueWith(async swalTask =>
        {
            SweetAlertResult result = swalTask.Result;
            if (!string.IsNullOrEmpty(result.Value))
            {
                await GoalService.Delete(goal.Id);
                await Swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "Confirmacion",
                                Text = "Se han eliminado las actividades con exito!",
                                Icon = SweetAlertIcon.Success,
                                TimerProgressBar = true,
                                ShowConfirmButton = false,
                                Timer = 1000
                            });
                await LoadList();
                OnSelectGoal(null);
                StateHasChanged();
            }
        });
    }

    void Close()
    {
        modal.Active = false;
        showError = false;
    }
    async void OnModalAccept()
    {
        if (string.IsNullOrWhiteSpace(inputValue))
        {
            showError = true;
            return;
        }
        else
            showError = false;

        try
        {
            if (isEditMode)
                await UpdateGoal();
            else
                await CreateGoal();
        }
        catch (Exception)
        {
            //Se controla desde el servicio.
        }


        StateHasChanged();
    }

    async Task UpdateGoal()
    {
        await GoalService.Update(goalEditing.Id, new GoalRequestModel { Name = inputValue });
        modal.Active = false;
        inputValue = string.Empty;
        await LoadList();
    }

    async Task CreateGoal()
    {
        await GoalService.Add(new GoalRequestModel { Name = inputValue });
        modal.Active = false;
        inputValue = string.Empty;
        await LoadList();
    }

    void OpenModal(string title)
    {
        modalTitle = title;
        modal.Active = true;
    }

    private void InputValueChanged(string newValue)
    {
        inputValue = newValue;
    }

    private int CalculateCompletedTasksCount(IEnumerable<ActivityDto> activities)
    {
        return activities.Count(activity => activity.Completed);
    }
}
